@model electo.Models.loginVolunteer

@{
    ViewBag.Title = "UpdateProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>UpdateProfile</h2>


@using (Html.BeginForm("UpdateProfile", "Account", FormMethod.Post, FormMethod.Post, new { id = "msform", enctype = "multipart/form-data" }))
{
   
    
    <div class="form-horizontal">
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.loginID)
        @Html.HiddenFor(model => model.voterID)   
        @Html.HiddenFor(model => model.userID)  
        @Html.HiddenFor(model => model.userTypeID)  
        @Html.HiddenFor(model => model.password)
        @Html.HiddenFor(model => model.dataIsCreated)
        @Html.HiddenFor(model => model.dataIsUpdated)
        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.modifiedBy)
        @Html.HiddenFor(model => model.isActive)
        @Html.HiddenFor(model => model.isBlocked)
        @Html.HiddenFor(model => model.lastLogin)
        @Html.HiddenFor(model => model.LastbadAttempt)     
        @Html.HiddenFor(model => model.fakeAttemptCount)    
        @Html.HiddenFor(model => model.volunteerID)

        <div class="form-group">
            @Html.LabelFor(model => model.mobile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.mobile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mobile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <img id="pic" src='@Model.userPhoto' alt="company logo" width="100px" height="100px" />
                <input type="file" id="photoA" name="files">
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fullName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fullName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fullName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.voterAadharNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.voterAadharNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.voterAadharNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Change Your Password", "ResetPassword")
     </div>

<script>
        function readURL(input) {
            debugger
            if (input.files && input.files[0]) {
                //Get reference of FileUpload.
                var fileUpload = document.getElementById("photoA");
                if (fileUpload.value.length > 0) {
                    //Check whether the file is valid Image.
                    var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                    if (regex.test(fileUpload.value.toLowerCase())) {
                        var reader = new FileReader();
                        var s = fileUpload.files[0];
                        reader.readAsDataURL(s);
                        reader.onload = function (e) {
                            var image = new Image();
                            image.src = e.target.result;
                            image.onload = function () {
                                debugger
                                var height = this.height;
                                var width = this.width;
                                if (height > 200 || width > 200) {
                                    debugger

                                    bootbox.alert({
                                        title: "Alert !",
                                        message: 'Height and Width must not exceed 200px.'
                                    });
                                    return false;
                                }
                                else {

                                    var reader1 = new FileReader();

                                    reader1.onload = function (e) {
                                        $('#pic').attr('src', e.target.result);
                                    }

                                    reader1.readAsDataURL(input.files[0]);
                                }
                            };
                        }
                    }
                    else {

                        bootbox.alert({
                            title: "Alert !",
                            message: 'Please select .jpg,.png,.gif'
                        });
                        return false;
                    }
                }

            }
        }

        $("#photoA").change(function () {
            readURL(this);
        });
</script>

<script>

    $(document).ready(function () {
        debugger
        if ('@TempData["Result"]' == "Success")

            bootbox.alert({
                title: "Confirmation !",
                message: '<p>Details Saved Successfully </p>',
                timeOut : 2000
            });
        if ('@TempData["Result"]' == "Failure")

            bootbox.alert({
                title: "Confirmation !",
                message: '<p>An Error Occurred</p>',
                timeOut: 2000
            });
    });
</script>
