@model electo.Models.CreatePartyViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutInternal.cshtml";
}

@using (Html.BeginForm("Create", "PoliticalPartiesByState", null, FormMethod.Post,new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Political Party</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model._politicalParty.politicalPartyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalParty.politicalPartyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalParty.politicalPartyName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">            
            <div class="col-md-10">
                <img id="pic" src='~/Logo/emptyLogo.jpg' alt="company logo" width="100px" height="100px" />
                <input type="file" id="photoA" name="files">
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalParty.politicalPartyWebsiteUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalParty.politicalPartyWebsiteUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalParty.politicalPartyWebsiteUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalParty.politicalPartyEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalParty.politicalPartyEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalParty.politicalPartyEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <h2>Head office Address</h2>
        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.stateID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model._politicalPartyAddress.stateID, new SelectList(ViewBag.stateID, "stateID", "stateName"), " State ", new { @class = "form-control", onchange = "getDistrictList()", @id = "stateID" })
              
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.stateID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.districtID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model._politicalPartyAddress.districtID, new SelectList(ViewBag.districtID, "districtID", "districtName"), " District ", new { @class = "form-control", @id= "ddl_districtID" })
               
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.districtID, "", new { @class = "text-danger" })
            </div>
          </div>


        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.plotNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.plotNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.plotNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.streetNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.streetNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.streetNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.address1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.address1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.address1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.address2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.address2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.address2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.pincode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.pincode, new { htmlAttributes = new { @class = "form-control", maxlength = 6 } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.pincode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model._politicalPartyAddress.telephone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model._politicalPartyAddress.telephone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model._politicalPartyAddress.telephone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"  />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
        function readURL(input) {
            debugger
            if (input.files && input.files[0]) {
                //Get reference of FileUpload.
                var fileUpload = document.getElementById("photoA");
                if (fileUpload.value.length > 0) {
                    //Check whether the file is valid Image.
                    var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                    if (regex.test(fileUpload.value.toLowerCase())) {
                        var reader = new FileReader();
                        var s = fileUpload.files[0];
                        reader.readAsDataURL(s);
                        reader.onload = function (e) {
                            var image = new Image();
                            image.src = e.target.result;
                            image.onload = function () {
                                debugger
                                var height = this.height;
                                var width = this.width;
                                if (height > 200 || width > 200) {
                                    debugger

                                    bootbox.alert({
                                        title: "Alert !",
                                        message: 'Height and Width must not exceed 200px.'
                                    });
                                    return false;
                                }
                                else {

                                    var reader1 = new FileReader();

                                    reader1.onload = function (e) {
                                        $('#pic').attr('src', e.target.result);
                                    }

                                    reader1.readAsDataURL(input.files[0]);
                                }
                            };
                        }
                    }
                    else {

                        bootbox.alert({
                            title: "Alert !",
                            message: 'Please select .jpg,.png,.gif'
                        });
                        return false;
                    }
                }

            }
        }

        $("#photoA").change(function () {
            readURL(this);
        });
</script>


<script>

    function getDistrictList()
{
        debugger;
        var stateId = $("#stateID").val();

        
        if (stateId == "" )
        {
           
            return;

        }
        $.ajax
        ({
            url: '/PoliticalPartiesByState/GetDistrictbyState',
            type: 'POST',
            datatype: 'application/json',
            contentType: 'application/json',
            data: JSON.stringify({
                stateId: +stateId,
               
            }),
            success: function(result)
          {
                $("#ddl_districtID").html("");
                $("#ddl_districtID").append($('<option></option>').val('').html('District'));
                $.each($.parseJSON(result), function(i, VSC)
                {
                    $("#ddl_districtID").append($('<option></option>').val(VSC.districtID).html(VSC.districtName))
                })

            },
            error: function()
            {
                alert("Whooaaa! Something went wrong..")
            },
        });
    }
</script>  

